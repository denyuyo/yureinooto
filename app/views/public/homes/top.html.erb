<div class="w_section" style="font-family: 'DotGothic16', sans-serif;">
  <div class="gutter">
    <div class="loop-wrap">
      <ul class="loop-area">
        <li class="content">京都御所</li>
        <li class="content">伏見稲荷大社</li>
        <li class="content">金閣寺</li>
        <li class="content">銀閣寺</li>
      </ul>
      <ul class="loop-area">
        <li class="content">熊本城</li>
        <li class="content">中尊寺金色堂</li>
        <li class="content">厳島神社</li>
        <li class="content">出雲大社</li>
      </ul>
      <ul class="loop-area">
        <li class="content">名古屋城</li>
        <li class="content">眼鏡橋</li>
        <li class="content">日光東照宮</li>
        <li class="content">姫路城</li>
      </ul>
    </div>
  </div>
</div>

<div class="container" style="font-family: 'Yusei Magic', sans-serif; margin-top: 33px; margin-bottom: 22px;">
  <p class="textTitle">どこか、遠くへ。</p>
  <p class="typeWriter">そうだ。遠くへ行こう。<br>明日、明後日。明明後日。<br>気の向くままに。</p>
</div>

<br></br>

<div class="topSection" style="position: relative;">
  <div class="topImage text-center" style="display: flex; justify-content: center; margin-left: -550px;">
    <%= image_tag "j449_7_13.png", alt: "Top Image", style: "width: 300px;" %>
  </div>
  <div class="balloon" style="position: absolute; top: -20px;">
    <p id="randomMessage" style="font-family: 'DotGothic16', sans-serif;">法隆寺でも見に行く？</p>
  </div>
</div>


<style>
  /*吹き出し*/
  .balloon {
  position: absolute;
  top: 50%;
  right: 50%;
  transform: translate(50%, -50%);
  margin: 2em 0 2em 40px;
  padding: 15px;
  background: #fff0c6;
  border-radius: 30px;
}

.balloon:before {
  content: "";
  position: absolute;
  left: -38px;
  width: 13px;
  height: 12px;
  bottom: 0;
  background: #fff0c6;
  border-radius: 50%;
}

.balloon:after {
  content: "";
  position: absolute;
  left: -24px;
  width: 20px;
  height: 18px;
  bottom: 3px;
  background: #fff0c6;
  border-radius: 50%;
}
.balloon p {
  margin: 0;
  padding: 0;
}

 /*ループ弾幕*/
.loop-wrap {
  display: flex;
  align-items: center;
  overflow: hidden;
  height: 50px;
  background: #fff000;
}
.loop-area {
  display: flex;
  animation: loop-slide 20s infinite linear 1s both;
  list-style: none;
  margin: 0;
  padding: 0;
}
.loop-area .content {
  width: 500px;
}
@keyframes loop-slide {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(-100%);
  }
}

/*弾幕の中身*/
.w_section {
  box-sizing: content-box;
  max-width: 100%;
  margin: 0 auto;
  padding: 2rem 0;
}
.gutter>*:not(:last-child) {
  margin-bottom: 2rem;
}


.textTitle {
  font-size: 40px;
  text-align: center;
  background: linear-gradient(90deg, #f5e3fa, #abc2f7);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
}

.typeWriter {
  font-size: 24px;
  text-align: center;
  margin: 0 !important;
  min-height: 120px;
  background: linear-gradient(90deg, #f5e3fa, #c8e1fa);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

p.textTitle {
    text-align: center;
    font-size: 3rem;
    font-weight: 600;
    letter-spacing: 0.08rem;
    margin-bottom: 0;
}

.typeWriter > span {
  border-right: 2px solid;
  animation: caret 1s steps(1) infinite;
}

@keyframes caret {
  50% {
    border-color: transparent;
  }
}
</style>

<script>
  // タイプライターのjs
  const doObserve = (element) => {
    const targets = document.querySelectorAll('.typeWriter'); /* ターゲットの指定 */
    const options = {
      root: null,
      rootMargin: '0px',
      threshold: 0
    };
    const observer = new IntersectionObserver((items) => {
      items.forEach((item) => {
        if (item.isIntersecting) {

          const typeWriter = selector => {
            const el = document.querySelector(selector);
            const text = el.innerHTML;

            (function _type(i = 0) {
              if (i === text.length) return;
              el.innerHTML = text.substring(0, i + 1) + '<span aria-hidden="true"></span>';
              setTimeout(() => _type(i + 1), 150);
            })();
          };

          typeWriter(".typeWriter");
        } else {
          item.target.classList.remove('typing'); /* 表示域から外れた時にターゲットから削除するclassの指定 */
        }
      });
    }, options);
    Array.from(targets).forEach((target) => {
      observer.observe(target);
    });
  };
  doObserve('.observe_target');
</script>
