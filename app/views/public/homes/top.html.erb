<div class="w_section">
  <div class="gutter">
    <div class="loop-wrap">
      <ul class="loop-area">
        <li class="content", style="font-family: 'DotGothic16', sans-serif;">京都御所</li>
        <li class="content", style="font-family: 'DotGothic16', sans-serif;">伏見稲荷大社</li>
        <li class="content", style="font-family: 'DotGothic16', sans-serif;">金閣寺</li>
        <li class="content", style="font-family: 'DotGothic16', sans-serif;">銀閣寺</li>
      </ul>
      <ul class="loop-area">
        <li class="content", style="font-family: 'DotGothic16', sans-serif;">熊本城</li>
        <li class="content", style="font-family: 'DotGothic16', sans-serif;">中尊寺金色堂</li>
        <li class="content", style="font-family: 'DotGothic16', sans-serif;">厳島神社</li>
        <li class="content", style="font-family: 'DotGothic16', sans-serif;">出雲大社</li>
      </ul>
      <ul class="loop-area">
        <li class="content", style="font-family: 'DotGothic16', sans-serif;">名古屋城</li>
        <li class="content", style="font-family: 'DotGothic16', sans-serif;">眼鏡橋</li>
        <li class="content", style="font-family: 'DotGothic16', sans-serif;">日光東照宮</li>
        <li class="content", style="font-family: 'DotGothic16', sans-serif;">姫路城</li>
      </ul>
    </div>
  </div>
</div>

<div class="container" style="margin-top: 33px; margin-bottom: 22px;">

  <p class="textTitle">どこか、遠くへ。</p>
  <p class="typeWriter">そうだ。遠くへ行こう。<br>明日、明後日。明明後日。<br>気の向くままに。</p>

  <div class="topSection">
    <div class="topImage">
      <%= image_tag "j449_7_13.png", alt: "Top Image", style: "width: 300px;" %>
    </div>

    <div class="balloon">
      <p id="randomMessage" style="font-family: 'DotGothic16', sans-serif;">法隆寺でも見に行く？</p>
    </div>
  </div>

</div>


<style>
  .balloon {
  position: absolute;
  top: 50%;
  right: 50%;
  transform: translate(50%, -50%);
  margin: 2em 0 2em 40px;
  padding: 15px;
  background: #fff0c6;
  border-radius: 30px;
}

.balloon:before {
  content: "";
  position: absolute;
  left: -38px;
  width: 13px;
  height: 12px;
  bottom: 0;
  background: #fff0c6;
  border-radius: 50%;
}

.balloon:after {
  content: "";
  position: absolute;
  left: -24px;
  width: 20px;
  height: 18px;
  bottom: 3px;
  background: #fff0c6;
  border-radius: 50%;
}
.balloon p {
  margin: 0;
  padding: 0;
}

  /*===========
.loop-
===========*/

.loop-wrap {
  display: flex;
  align-items: center;
  overflow: hidden;
  height: 50px;
  background: #fff000;
}
.loop-area {
  display: flex;
  animation: loop-slide 20s infinite linear 1s both;
  list-style: none;
  margin: 0;
  padding: 0;
}
.loop-area .content {
  width: 500px;
}
@keyframes loop-slide {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(-100%);
  }
}

/*===========
common
===========*/

body {
  font-size: 14px;
  letter-spacing: .025em;
  line-height: 1.8;
  padding: 0;
  margin: 0;
}
section {
  max-width: 420px;
  margin: 0 auto;
  background: #fff;
}
.s_section {
  box-sizing: content-box;
  max-width: 1000px;
  margin: 0 auto;
  padding: 2rem 1rem;
}
.w_section {
  box-sizing: content-box;
  max-width: 100%;
  margin: 0 auto;
  padding: 2rem 0;
}
.gutter>*:not(:last-child) {
  margin-bottom: 2rem;
}
h1, h2 {
  color: #333;
  font-size: 22px;
  font-weight: bold;
  text-align: center;
  border-top: 2px solid #333333;
  border-bottom: 2px solid #333333;
  padding: 5px;
  margin-top: 0;
  margin-bottom: 0;
}
@media (max-width: 736px) {
  h1, h2 {
    font-size: 16px;
  }
}
a._a {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  max-width: 300px;
  margin: 0 auto;
  padding: 2.0em 1.0em;
  border: 1px solid #222222;
  background: linear-gradient(to right, #ffffff 50%, #222222 50%);
  background-size: 200% auto;
  box-sizing: border-box;
  color: #222222;
  font-size: 14px;
  text-decoration: none;
  text-align: center;
  transition: .3s;
  position: relative;
}
a._a:after {
  content: "";
  position: absolute;
  right: -5px;
  bottom: -5px;
  width: 100%;
  height: 100%;
  border-right: 1px solid #222222;
  border-bottom: 1px solid #222222;
}
a._a:hover {
  color: #ffffff;
  background-position: -100% 0;
}
.clearfix {
  display: block;
}
.clearfix:before {
  content: "";
  display: block;
  clear: both;
}
.clearfix:after {
  content: "";
  display: block;
  clear: both;
}

.textTitle {
  font-size: 40px;
  text-align: center;
  background: linear-gradient(90deg, #f5e3fa, #abc2f7);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
}

.typeWriter {
  font-size: 24px;
  text-align: center;
  margin: 0 !important;
  min-height: 120px;
  background: linear-gradient(90deg, #f5e3fa, #c8e1fa);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

p.textTitle {
    text-align: center;
    font-size: 3rem;
    font-weight: 600;
    letter-spacing: 0.08rem;
    margin-bottom: 0;
}

.typeWriter > span {
  border-right: 2px solid;
  animation: caret 1s steps(1) infinite;
}

@keyframes caret {
  50% {
    border-color: transparent;
  }
}



.topCurtainbg {
    display: block;
    content: "";
    position:fixed;
    z-index: 999;
    width: 100%;
    height: 100vh;
    top: 0;
    left: 0;
    transform: scaleY(0);
    background-color: #313131;
    animation-name:curtainAnime;
    animation-duration:1.2s;
    animation-timing-function:ease-in-out;
    animation-fill-mode:forwards;
}

@keyframes curtainAnime {
	0% {
		transform-origin:top;
		transform:scaleY(0);
	}
	50% {
		transform-origin:top;
		transform:scaleY(1);
	}
	50.001% {
		transform-origin:bottom;
	}
	100% {
		transform-origin:bottom;
		transform:scaleY(0);
	}
}

.fadeout {
  animation : fadeOut 1s;
  animation-fill-mode: both;
}
@keyframes fadeOut {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

#container{
	opacity: 0;/*はじめは透過0に*/
}

/*bodyにpageOnクラスがついたら出現*/
body.pageOn #container{
	animation-name:PageAnimeOn;
	animation-duration:1s;
	animation-delay: 0.8s;
	animation-fill-mode:forwards;
	opacity: 0;
}

@keyframes PageAnimeOn{
	0% {
	opacity: 0;
	}
	100% {
	opacity: 1;
}
}
</style>

<script>
  const doObserve = (element) => {
  const targets = document.querySelectorAll('.typeWriter'); /* ターゲットの指定 */
  const options = {
    root: null,
    rootMargin: '0px',
    threshold: 0
  };
  const observer = new IntersectionObserver((items) => {
    items.forEach((item) => {
      if (item.isIntersecting) {

  const typeWriter = selector => {
    const el = document.querySelector(selector);
    const text = el.innerHTML;

    (function _type(i = 0) {
      if (i === text.length) return;
      el.innerHTML = text.substring(0, i + 1) + '<span aria-hidden="true"></span>';
      setTimeout(() => _type(i + 1), 150);
    })();
  };

  typeWriter(".typeWriter");
        } else {
          item.target.classList.remove('typing'); /* 表示域から外れた時にターゲットから削除するclassの指定 */
        }
      });
    }, options);
    Array.from(targets).forEach((target) => {
      observer.observe(target);
    });
  };
  doObserve('.observe_target');


  // ページのロードが終わったらtoast表示
  const snack = document.getElementById("topSnack"); // toastのID指定
  window.addEventListener('load', () => { //ロード完了後イベント開始
    snack.className = "show"; // snackbarを表示
  });

  // バツをクリックで非表示
  const snackClose = document.getElementById("topSnack"); // toastのID指定
  snackClose.addEventListener('click', () => { //クリックでイベント開始
    snack.classList.remove('show'); // snackbarを非表示
  });


  // bodyタグを取得
  const documentBody = document.querySelector('body');
  // body直下にオーバーレイの要素を作成
  var newElement = document.createElement("div");
  newElement.setAttribute("class","topCurtainbg");
  documentBody.prepend(newElement);
  // オーバーレイの次に要素を作成
  var coverElement = document.createElement("div");
  coverElement.setAttribute("id","container");
  newElement.prepend(coverElement);
  // bodyタグにclassを付与
  documentBody.classList.add('pageOn');

  // 1.5秒経ったらオーバーレイ非表示
  setTimeout(function(){
      newElement.style.display = "none";
    }, 1500);

  // ページ遷移時にフェードアウト
  window.addEventListener("beforeunload", () => {
    documentBody.classList.add('fadeout');
    setTimeout(function(){
      documentBody.style.display = "none";
    }, 1000);
  }, false);



   // ランダムなメッセージの配列
  const messages = [
    "法隆寺でも見に行く？",
    "新しい探索の始まりかな？",
    "今日はどんな予定がある？",
    "心地よい風が吹いてるね",
    "素敵な一日を過ごしてね"
  ];

  // ランダムなメッセージを生成する関数
  function generateRandomMessage() {
    const randomIndex = Math.floor(Math.random() * messages.length);
    const randomMessage = messages[randomIndex];
    const messageElement = document.getElementById("randomMessage");
    messageElement.textContent = randomMessage;
  }

  // ページ読み込み時とリロード時にランダムなメッセージを表示する
  window.addEventListener("DOMContentLoaded", generateRandomMessage);
  window.addEventListener("beforeunload", generateRandomMessage);
</script>